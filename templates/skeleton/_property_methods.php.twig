{# @var meta_entity \Kevin3ssen\EntityGeneratorBundle\MetaData\MetaEntity #}
{# @var property \Kevin3ssen\EntityGeneratorBundle\MetaData\Property\AbstractProperty #}
{% block property_methods %}
{% if meta_entity.idProperty is null %}

    public function getId(): ?int
    {
        return $this->id;
    }
{% endif %}
{% for property in meta_entity.properties %}

{% if 'Collection' in property.returnType %}{{ block('property_collection_methods') }}{% else %}
    public function set{{ property.name | classify }}({{ property.nullable ? '?' : '' }}{{ property.returnType }} ${{ property.name }}): self
    {
        $this->{{ property.name }} = ${{ property.name }};
        return $this;
    }

    public function get{{ property.name | classify }}(): {{ property.nullable ? '?' : '' }}{{ property.returnType }}
    {
        return $this->{{ property.name }};
    }
{% endif %}
{% endfor %}
{% endblock %}

{% block property_collection_methods %}
{# @var property \Kevin3ssen\EntityGeneratorBundle\MetaData\Property\AbstractRelationshipProperty #}
    /**
     * @return Collection|ArrayCollection|{{ property.targetEntity }}[]
     */
    public function get{{ property.name | classify }}(): ?Collection
    {
        return $this->{{ property.name }};
    }

    public function add{{ property.name | singularize | classify }}({{ property.targetEntity }} ${{ property.name | singularize }}): self
    {
        $this->{{ property.name }}->add(${{ property.name | singularize }});
{% if property.mappedBy %}
        ${{ property.name | singularize }}->set{{ property.mappedBy | classify }}($this);
{% endif %}
        return $this;
    }

    public function remove{{ property.name | singularize | classify }}({{ property.targetEntity }} ${{ property.name | singularize }}): self
    {
        $this->{{ property.name }}->removeElement(${{ property.name | singularize }});
        return $this;
    }
{% endblock %}